---
# tasks file for skupper_cli_install
- name: Retrieving skupper releases
  ansible.builtin.uri:
    url: "{{ latest_release_url }}"
    method: GET
    status_code: 200
    body_format: json
  register: latest_release
  delay: 30
  when: "skupper_cli['version'] is not defined"
  ignore_errors: true

- name: Determining system_facts
  ansible.builtin.set_fact:
    cli_dest_location: "{{ skupper_cli.location if skupper_cli['location'] is defined else default_location }}"
    cli_os: >-
      {{ skupper_cli.os if skupper_cli['os'] is defined
      else 'linux' if ansible_system == 'Linux'
      else 'win' if ansible_os_family == 'Windows'
      else 'mac' if ansible_os_family == 'Darwin'
      else default_os }}
    cli_arch: "{{ skupper_cli.arch if skupper_cli['arch'] is defined else arch_values[ansible_architecture] | default(default_arch) }}"
    cli_version: >-
      {{ skupper_cli.version if skupper_cli['version'] is defined
      else latest_release.json.name if (latest_release and not latest_release.failed)
      else default_version }}

- name: Determining skupper binary location
  ansible.builtin.set_fact:
    cli_dest_file: "{{ cli_dest_location }}/skupper"

- name: Verifying if skupper binary already exists
  ansible.builtin.stat:
    path: "{{ cli_dest_file }}"
  register: skupper_bin

- name: Exit if skupper binary exists or force is set to false
  ansible.builtin.meta: end_host
  when: skupper_bin.stat.exists and ( skupper_cli['force'] is not defined or not (skupper_cli.force | bool) )

- name: Remove skupper binary if exists and force is set to true
  ansible.builtin.file:
    path: "{{ cli_dest_file }}"
    state: absent
  when: skupper_bin.stat.exists and ( skupper_cli['force'] is defined and (skupper_cli.force | bool) )

- name: Determining tarball
  ansible.builtin.set_fact:
    tarball: "skupper-cli-{{ cli_version if cli_version != '' else default_version }}-{{ cli_os }}-{{ cli_arch }}.tgz"

- name: Determining download info
  ansible.builtin.set_fact:
    download_url: "{{ download_url_base }}/{{ cli_version }}/{{ tarball }}"

- name: Download info
  ansible.builtin.debug:
    msg: "Downloading {{ download_url_base }}/{{ cli_version }}/{{ tarball }} into {{ cli_dest_location if cli_dest_location != '' else default_location }}"

- name: Downloading tar ball
  ansible.builtin.unarchive:
    src: "{{ download_url }}"
    dest: "{{ cli_dest_location }}"
    remote_src: true

- name: Verifying installation
  ansible.builtin.stat:
    path: "{{ cli_dest_file }}"
  register: skupper_bin

- name: Skupper binary installed
  ansible.builtin.fail:
    msg: "Installation failed - {{ cli_dest_file }} not found"
  when: not skupper_bin.stat.exists
